(**************************************************************)
{PROGRAMACION: ALEJANDRO LUCAS BALDRÉS                         }
{FECHA: 17/09/06                                               }
{LICENCIA: GNU/GPL                                             }
{--------------------------------------------------------------}
{"ESTE PROGRAMA ESTA DEDICADO A TODAS LAS PERSONAS QUE ME      }
{AYUDARON A SER LA PERSONA QUE HOY SOY"                        }
{--------------------------------------------------------------}
{COMPILADO CON FREEPASCAL                                      }

program PseudoTrans;
{$mode objfpc}{$H+} //Establesco modo Object Pascal

uses
crt,StrUtils,SysUtils,Classes;

const //Declaro Constantes
Version='0.2.1.30';
Plataforma='Linux';
Fecha_Crea='17/09/06';

var
Creo_Archivo:Boolean=true;//ESTABLESCO SI CREO EL ARCHIVO O AGREGO LINEAS
Directorio_pto,Directorio_pse:String; //ALMACENO LA RUTA DEL PSEUDOCÓDIGO
Origen,Destino:String;//Path de Archivo en pseudocodigo y Path de Archivo fuente

////////////////////////////////////////////////////////////////////////agrego ; y . o )
procedure Agrego (var Cadena:TStrings);
 var
 Pal_Sin_pto,aux,aux2:String[130];
 LlevaPto_Coma:Boolean=true;//VARIABLE QUE DETERMINA SI LLEVA O NO PTO Y COMA
 archivo:text;
 i:integer;

 begin
 for i:=0 to Cadena.count-1 do //RECORRO EL FUENTE EN PSEUDOCODIGO
     begin
     aux:=uppercase(Cadena.Strings[i]);
     if i=Cadena.count-1 then //SI ES LA ULTIMO REGLON O SEA END O FIN LE AGREGO EL PUNTO
        Cadena.Strings[i]:=Cadena.Strings[i]+'.'
        else
        begin
        aux2:=uppercase(Cadena.Strings[i+1]);
        assign(archivo,Directorio_pto);//ABRO EL ARCHIVO DE PALABRAS SIN PUNTO
        reset(archivo);
        while (not eof(archivo))and(llevaPto_coma) do //SI NO TERMINA EL FILE Y VERDAD DE LA VAR
       	   begin
 	   readln(archivo,Pal_Sin_pto); 
           if (FindPart(uppercase(Pal_Sin_pto),aux)>0)or ((Length(aux)=0)
        	or((Length(aux)=1)and(aux=#0)))or(FindPart('SINO ',aux2)>0) then 
        	begin
        	LlevaPto_Coma:=false;
        	end
              else begin
	         LlevaPto_Coma:=true;
                  end;
 	      end;
	//SI LlevaPto_coma = verdadero LE AGREGO EL PUNTO Y COMA
        if LlevaPto_Coma then Cadena.Strings[i]:=Cadena.Strings[i]+';' 
          else LlevaPto_Coma:=true;
        close(Archivo);
        end;
    end;
end;
////////////////////////////////////////////////////////////////////fin agrego ;    
 
///////////////////////////////////////////////////PROCEDIMIENTOS DE OPERACIONES
procedure Cambio_Operadores (var CAdena:String;Op_Pascal,Operador:string;
				resta:integer;Valido,Val2_Pal_Res:boolean);
 var
 Pos_ope,i:Integer;
 aux:string;
 
 begin
 aux:=uppercase(Cadena);
 Pos_ope:=findPart(operador,aux);//BUSCO EL OPERADOR EN LA LINEA LEIDA
 delete(aux,Pos_ope,length(operador));//BORRO EL OPERADOR
 while Pos_ope>0 do
 	begin
	i:=(Pos_ope-1);
	//VALIDO ES UN BOOLEANO QUE DETERMINA SI ES UNA PALABRA RESERVADA O
	//PERTENECE A UNA PARTE DE UNA VARIABLE
 	if (Valido) and (i>0) then
 		if Cadena[i]<>' ' then
 			resta:=-100;
 	if Val2_Pal_Res then
 		if (length(cadena)<>length(operador)) then
 			resta:=-100;
	//FIN DE VALIDACION
 	if resta<>-100 then
	  Cadena:=Copy(Cadena,1,Pos_ope-resta)+Op_Pascal+Copy(Cadena,Pos_ope+length(operador),Length(Cadena)-(Pos_ope-1+length(operador)));
	if FindPart('(',Op_Pascal)>0 then
		insert(')',cadena,length(Cadena));
	//determino si se declara una cadena con longitud
        if Op_pascal='String' then
	  begin
	  for i:=0 to 9 do 
	   begin
	   Pos_ope:=findPart(IntToStr(i),Cadena);
	   if Pos_ope>0 then break;
	   end;
	  if Pos_ope>0 then
		begin
		insert('(',Cadena,FindPart('String',cadena)+7);
		insert(')',Cadena,Length(Cadena));
		end;
	  end;
	//fin de Determinación
 	Pos_ope:=findPart(operador,aux);
 	delete(aux,Pos_ope,length(operador));
 	end;
 end;
///////////////////////////////////////////////FIN PROCEDIMIENTOS DE OPERACIONES

/////////////////////////////PSEUDOCODIGO UNPSJB (UNIV. NAC. PAT. SAN JUAN BOSCO
procedure Busco (var Cadena:TStrings);
 type
 // TREGISTRO = [INTRUCCION_PASCAL],[INSTRUCCION_PSEUDOCODIGO],[OPCION1],[OPCION2],[OPCION3]
 Tregistro=record
 	     InstPascal:String;
 	     InstPseudo:String;
 	     BorrarCar:Integer;
 	     Valido1:Boolean;
 	     Valido2:Boolean;
 	   end;
 var
 Arch_Pse:text;
 aux2,auxStr:String;
 i:Integer;
 aux:Tregistro;

 begin
 for i:=0 to cadena.count-1 do //RECORRO EL PSEUDOCODIGO
 begin
 assign(Arch_Pse,Directorio_pse);
 {$I-}
 reset(Arch_Pse);
 {$I+}
 if ioresult<>0 then
 	begin
 	writeln('ERROR EL ARCHIVO DEL PROGRAMA: '+Directorio_pse+' NO EXISTE!!!');
 	end
   else begin
   	while not eof(Arch_pse) do
   		begin
		//COMIENZO A LEER EL REGISTRO
   		readln(Arch_pse,aux.InstPascal);
   		readln(Arch_pse,aux.InstPseudo);
   		readln(Arch_pse,auxStr);
   		aux.BorrarCar:=StrToInt(auxStr);
   		readln(Arch_pse,auxStr);
   		aux.Valido1:=StrToBool(auxStr);
   		readln(Arch_pse,auxStr);
   		aux.Valido2:=StrToBool(AuxStr);
                aux2:=Cadena.Strings[i];
		//FIN DE LECTURA DEL REGISTRO Y ASGINACION
        	Cambio_Operadores (aux2,aux.InstPascal,Aux.InstPseudo
   				   ,aux.BorrarCar,aux.Valido1,aux.valido2);
                Cadena.Strings[i]:=aux2; //ASIGNO LA PALABRA TRADUCIDA
   		end;
   	close(Arch_pse);
   	end;
  end;
 end;
/////////////////////////FIN PSEUDOCODIGO UNPSJB (UNIV. NAC. PAT. SAN JUAN BOSCO 

/////////////////////////////////////////////PROCEDIMIENTO PARA GENERARAR LOS LOG
procedure Genero_logs(Nro_linea:integer);
 begin
 //SI UN PARAMETRO CORRESPONDE A --LOG GENERO EL ARCHIVO O LE AGREGO LINEAS DE LOG
 if (uppercase(ParamStr(1))='--LOG')or(uppercase(ParamStr(3))='--LOG')or(uppercase(ParamStr(4))='--LOG') Then
     begin
     assign(Output,'pseudotrans.log');
     if fileExists('pseudotrans.log') then //SI EL ARCHIVO EXISTE LE AGREGO LINEAS
	     append(Output)
	 else rewrite(Output);
     writeln(Output,'Generado el: '+DateTimeToStr(now()));
     writeln(Output,'RESULTADO');
     writeln (Output,'El codigo fuente fue generado en: '+Destino);
     writeln (Output,'-------------------------------');
     close(Output);
     end;
 end;
////////////////////////////////////////FIN DE PROCEDIMIENTO PARA GENERARAR LOS LOG

////////////////////PROCEDIMIENTO PRINCIPAL QUE DIBUJA LA PANTALLA, CARGA ARCH, ETC
procedure Cargo_y_traduzco (Archivo:String);
 var
 i:integer;
 arc:file of byte;
 aux:TStringList;

 begin
 aux:=TStringList.create; //CREO EL OBJETO DE TIPO LISTA DE CADENAS
 //IMPRIMO ENCABEZADO EN LA PANTALLA
 writeln ('PseudoTrans traductor de pseudocodigo Version '+Version+' ['+fecha_crea+'] para '+Plataforma);
 writeln('Copyright (C) 2006 by Alejandro Lucas Baldres');
 writeln;
 //CARGO EL ARCHIVO EN LA LISTA DE CADENAS Y RECORRO LA MISMA, CONVIRTIENDO LOS TAB EN 
 //ESPACIOS Y LUEGO CONVIERTO VARIOS ESPACIOS EN 1 E INCREMENTO EL NRO DE LINEAS
   aux.LoadFromFile(Archivo);
   for i:=0 to aux.Count-1 do  
    begin
    aux.Strings[i]:=Tab2Space(aux.strings[i],0);
    aux.Strings[i]:=DelSpace1(aux.Strings[i]); //REDUZCO LA CANTIDAD DE ESPACIOS A 1
    end;
   //AGREGO ; O .
   Agrego (aux);
   //TRADUZCO
   Busco(aux);
   //GUARDO EL ARCHIVO FUENTE
   aux.SaveToFile(Destino);
   //COMIENZA DE IMPRESION DE RESULTADOS EN PANTALLA
   writeln('RESULTADO');
   writeln ('El codigo fuente fue generado en: '+Destino);
   assign(Arc,Destino);
   reset(arc);
   writeln ('Tamaño del Archivo Generado: ',fileSize(Arc),' Bytes');
   close(Arc);
   writeln ('Total de lineas: ',aux.count-1);
   writeln;
   writeln ('GRACIAS POR UTILIZAR EL PROGRAMA!!!!!!');
   //FIN DE IMPRESION DE RESULTADOS EN PANTALLA
   //GENERO LOG SI ES QUE SE ENVIO EL PARAMETRO
   Genero_logs(aux.count-1);
 end;

////////////////////////////////////////////////////////////////////////AYUDA///
procedure Visualizo (Arch:String);
 var
 aux:String;
 a:text;
 count:integer;
 
 begin
 count:=1;
 Assign (a,Arch);
 {$I-}
 reset(a);
 {$I+}
 if ioresult<>0 then 
 	begin
 	writeln('NO SE ENCUENTRA EL DOCUMENTO: "/doc/DocUnidades"!!!');
	exit
	end
  else begin
       readln(a,aux);
       writeln(aux);
       while not eof(a) do
       		begin
       		readln(a,aux);
   	        writeln(aux);
   	        count:=count+1;
   	        if count=23 then
   	        	begin
   	        	readkey;
   	        	count:=1;
   	        	end;
   	        end;
       readkey;
       Clrscr;	         
       end;
end;
 		     
Function Man (Cad:String):Boolean;

 procedure Opero (Ruta:String);
  begin
  Man:=false;
  Visualizo(ruta);//ExtractFilePath(paramstr(0))+
  end;
  
 begin
 Man:=true;
 Cad:=uppercase(Cad);
 if Cad='MANUNIDADES' then
     begin
     {$IFDEF LINUX}
     Opero('/usr/share/pseudotrans/doc/DocUnidades');
     {$ELSE}
     Opero('C:\Pseudotrans\doc\DocUnidades');
     {$ENDIF}
     man:=false;
     end
   else if Cad='MANCONCEPTOS' then
   	   begin
	   {$IFDEF LINUX}
           Opero('/usr/share/pseudotrans/doc/conceptos');
	   {$ELSE}
	   Opero('C:\Pseudotrans\doc\conceptos');
	   {$ENDIF}
	    man:=false;
           end
          else if Cad='MANREGLAS' then
          	  begin         
 		  {$IFDEF LINUX}
        	  Opero('/usr/share/pseudotrans/doc/ArchivoReglas');
 		  {$ELSE}
		  Opero('C:\Pseudotrans\doc\ArchivoReglas');
		  {$ENDIF}
		   man:=false;
        	  end
        	 else if Cad='MANPSEUDOCODIGO' then
        	 	begin
			{$IFDEF LINUX}
		        Opero('/usr/share/pseudotrans/doc/pseudocodigo');
			{$ELSE}
			Opero('C:\Pseudotrans\doc\pseudocodigo');
			{$ENDIF}
			 man:=false;
		        end
		      else if Cad='--VERSION' then
				begin
				writeln ('Versión del Nucleo: '+Version);
				writeln ('Compilado el: '+Fecha_crea);
				writeln ('Plataforma: '+Plataforma);
				man:=false;
				end
			  else if Cad='MANNUCLEO' then
		       	 	begin
				{$IFDEF LINUX}
		        	Opero('/usr/share/pseudotrans/doc/nucleo');
				{$ELSE}
				Opero('C:\Pseudotrans\doc\nucleo');
				{$ENDIF}
				 man:=false;
			        end;
 end;
 
begin	
//determino el directorio del programa
Origen:=paramStr(1);
//VERIFICO QUE NO SEA AYUDA
if paramStr(1)='' then Origen:='mannucleo';
if man (Origen) then
 begin
 Destino:=paramStr(2);//ESTABLESCO EL SEGUNDO PARAMETRO COMO ARCHIVO DE DESTINO
 while Destino='' do
	begin
	clear;
	write('Ingrese el nombre de archivo de Salida: ');
	readln(Destino);
	end;
 if FileExists(ParamStr(3)) then //ESTABLESCO DICCIONARIOS
 	begin
 	Directorio_pse:=ParamStr(3);
 	Directorio_pto:=ParamStr(3)+'_pto';
 	end
   else begin
	{$IFDEF LINUX}
   	Directorio_pse:='/usr/share/pseudotrans/datos/unp';
   	Directorio_pto:='/usr/share/pseudotrans/datos/unp_pto';
	{$ELSE}
	Directorio_pse:='C:\pseudotrans\datos\unp';
   	Directorio_pto:='C:\pseudotrans\datos\unp_pto';
	{$ENDIF}   	
   	end;
 if FileExists(Origen) then //Si el Archivo fuente (Pseudo) existe procedo a realizar las opera
	 Cargo_y_traduzco (Origen)
  else writeln ('No existe el archivo: '+Origen);
 end;
end.
